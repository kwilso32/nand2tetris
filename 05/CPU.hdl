// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
//CONTRIBUTERS: ANDREW STODDARD AND KENNETH WILSON

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Or16(a = false, b = instruction, out[15] = cinstruction, out[12] = abit, out[5] = dest1, out[4] = dest2, out[3] = dest3, out[2] = jump1, out[1] = jump2, out[0] = jump3);
    Not(in = cinstruction, out = ainstruction);

    Mux16(a = aregout, b = inM, sel = abit, out = aluin);
    ALU(x = dregout, y = aluin, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = aluout, out = outM, zr = zr, ng = ng);


    And(a = cinstruction, b = dest1, out = alutoareg);
    Or(a = ainstruction, b = alutoareg, out = aregload);
    Mux16(a = instruction, b = aluout, sel = cinstruction, out = aregin);
    ARegister(in = aregin, load = aregload, out = aregout, out[0..14] = addressM);

    And(a = cinstruction, b = dest2, out = dregload);
    DRegister(in = aluout, load = dregload, out = dregout);




    Or(a = ng, b = zr, out = ngorzr);
    Not(in = ngorzr, out = gtset);

    And(a = ng, b = jump1, out = lt);
    And(a = zr, b = jump2, out = eq);
    And(a = gtset, b=jump3, out = gt);

    Or(a = lt, b = eq, out = le);
    Or(a = le, b = gt, out = x);
    And(a = cinstruction, b = x, out = pcload);

    PC(in = aregout, load = pcload, inc = true, reset = reset, out[0..14] = pc);


    And(a = cinstruction, b = dest3, out = writeM);

    }